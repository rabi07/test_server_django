name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install awscli -y

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ap-south-1

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private
        
    - name: Build and push Docker image
      id: build-image
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        IMAGE_URI=577793742906.dkr.ecr.ap-south-1.amazonaws.com/my-app
        docker build -t $IMAGE_URI:${IMAGE_TAG} .
        docker push $IMAGE_URI:${IMAGE_TAG}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.21.0'  # Specify the version of kubectl you need

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        IMAGE_URI=577793742906.dkr.ecr.ap-south-1.amazonaws.com/my-app
        
        # Create Kubernetes deployment YAML
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-app
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: my-app
          template:
            metadata:
              labels:
                app: my-app
            spec:
              containers:
              - name: my-app
                image: $IMAGE_URI:${IMAGE_TAG}
                ports:
                - containerPort: 8000
        EOF

        # Apply the deployment to the cluster
        kubectl apply -f deployment.yaml

        # Expose the deployment as a service
        cat <<EOF > service.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name
